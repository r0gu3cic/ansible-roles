---
- name: Install phpmyadmin using composer
  become: true
  become_user: "{{web_username}}"
  composer:
    command: create-project
    arguments: phpmyadmin/phpmyadmin
    working_dir: "/home/{{web_username}}/deployments" #install here phpmyadmin

# Disable root login for phpmyadmin, create pma config file
- name: Disable root login on pma
  template:
    src: "files/config.inc.php.j2"
    dest: "/home/{{web_username}}/deployments/phpmyadmin/config.inc.php"
# Create link for phpmyadmin
- name: Create link for phpmyadmin
  file:
    src: "/home/{{web_username}}/deployments/phpmyadmin"
    dest: "/home/{{web_username}}/phpmyadmin" #create this link to be served by nginx
    state: link
# Create file for basic http auth for pma path
- name: Create file for basic http authentication for phpmyadmin
  htpasswd:
    path: "{{pma_basic_http_auth_file}}"  #create file with username and password
    name: "{{pma_basic_http_auth_username}}" #use whichever user you want
    password: "{{pma_basic_http_auth_password}}"

# php-fpm pool for pma
- name: Create php-fpm pool for pma
  template:
    src: "files/php.fpm.pma.pool.conf.j2"
    dest: "/etc/php/{{php_version}}/fpm/pool.d/{{phpmyadmin_subdomain}}.conf" #.conf required at the end
  notify:
    - restart php-fpm
# There has to be at least one pool at all time, so I cant delete default pool in php-setup role
- name: Delete default php-fpm pool 
  file:
    path: "/etc/php/{{php_version}}/fpm/pool.d/www.conf"
    state: absent
  notify: 
    - restart php-fpm

# Nginx configuration for phpmyadmin
- name: Sets nginx conf file for pma domain "{{phpmyadmin_subdomain}}"
  template:
    src: "files/nginx.http.pma.conf.j2"
    dest: "/etc/nginx/sites-available/{{phpmyadmin_subdomain}}"
- name: Enable new nginx pma site "{{phpmyadmin_subdomain}}"
  file:
    src: "/etc/nginx/sites-available/{{phpmyadmin_subdomain}}"
    dest: "/etc/nginx/sites-enabled/{{phpmyadmin_subdomain}}"
    state: link
- name: Force reload nginx configuration
  service: name=nginx state=reloaded
- name: Configure logrotation for pma logs
  template:
    src: "files/pma.logrotate.conf.j2"
    dest: "/etc/logrotate.d/{{phpmyadmin_subdomain}}"

# Generate a Self Signed OpenSSL certificate
# I had to make sure that community.crypto collection is installed
# ansible-galaxy collection install community.crypto
# ansible-galaxy collection list
- name: Create a private key (RSA, 4096 bits) for signing a certificate
  community.crypto.openssl_privatekey:
    path: /etc/ssl/private/selfsigned-{{phpmyadmin_subdomain}}.key
  register: selfsigned_key_result
  when: env_name == "local"
- name: Create simple self-signed certificate that lasts ~10 years
  community.crypto.x509_certificate:
    path: /etc/ssl/certs/selfsigned-{{phpmyadmin_subdomain}}.crt
    privatekey_path: /etc/ssl/private/selfsigned-{{phpmyadmin_subdomain}}.key
    provider: selfsigned
  register: selfsigned_cert_result
  when: (selfsigned_key_result is succeeded) and (env_name == "local")
# # It takes ~10 minutes to generate this
# - name: Generate Diffie-Hellman parameters with the default size (4096 bits)
#   openssl_dhparam:
#     path: /etc/ssl/dhparams.pem #these are parameters and it could be reused for multiple sites
- name: Sets nginx conf file for "{{env_name}}" environment PMA subdomain "{{phpmyadmin_subdomain}}" that will use generated SSL cert
  template:
    src: "files/nginx.local.https.pma.conf.j2"
    dest: "/etc/nginx/sites-available/{{phpmyadmin_subdomain}}"
  when: (selfsigned_cert_result is succeeded) and (env_name == "local") #check if previous task was successful

# Get SSL
# Check if you can get a SSL cert
- name: Check if you can obtain SSL using certbot for pma domain "{{phpmyadmin_subdomain}}"
  become: true
  shell: certbot certonly --webroot -w {{certbot_dir}} --cert-name {{phpmyadmin_subdomain}} -d {{phpmyadmin_subdomain}} --non-interactive --agree-tos -m {{admin_email_address}} --dry-run
  register: certbot_dryrun_result #register result of this task
  when: env_name != "local"
# Get SSL cert, SSL cert will be saved as defined --cert-name
- name: Obtain SSL using certbot for pma domain "{{phpmyadmin_subdomain}}"
  become: true
  shell: certbot certonly --webroot -w {{certbot_dir}} --cert-name {{phpmyadmin_subdomain}} -d {{phpmyadmin_subdomain}} --non-interactive --agree-tos -m {{admin_email_address}}
  when: (certbot_dryrun_result is succeeded) and (env_name != "local") #check if previous task was successful
  register: certbot_result #register result of this task
# New nginx configuration
- name: Sets new nginx conf file for pma domain "{{phpmyadmin_subdomain}}" that will use obtained SSL cert
  template:
    src: "files/nginx.https.pma.conf.j2"
    dest: "/etc/nginx/sites-available/{{phpmyadmin_subdomain}}"
  when: (certbot_result is succeeded) and (env_name != "local") #check if previous task was successful
- name: Force reload nginx configuration
  service: name=nginx state=reloaded